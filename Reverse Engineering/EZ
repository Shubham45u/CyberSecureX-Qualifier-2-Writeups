Challenge EZ
Category Reverse engineering
Difficulty easy
points 150
Content = The app is engineered. All you have to do is go backwards.
#using the file command
file rev1
#OUTPUT
rev1: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=255d897838bdcc2288ea7a22b3f7834a44eaf009, for GNU/Linux 4.4.0, stripped
#tried basic commands eg. strings objdump
#Using ghidra search the logic

Using Ghidra, I loaded the binary and explored the function list. The main functions of interest were:
- FUN_001097e0: final flag verification
- FUN_00108d80: checksum calculation
- FUN_00109470: input processing

#FUN_001097e0
#this is the main logic
bool FUN_001097e0(void)

{
  undefined4 extraout_EAX;
  undefined4 extraout_EAX_00;
  int iVar1;
  undefined4 extraout_var;
  undefined4 extraout_var_00;
  undefined8 extraout_RDX;
  undefined8 extraout_RDX_00;
  
  FUN_00108b40();
  FUN_00108d60(CONCAT44(extraout_var,extraout_EAX),extraout_RDX);
  iVar1 = FUN_00108d70(CONCAT44(extraout_var_00,extraout_EAX_00),extraout_RDX_00);
  return iVar1 == 0x4d2;
}

#now we have found what we wanted 
Brute forcing string will take time but will be successful.
You can use GDB which is better.

#After doing all rhe analysis
nc 0.cloud.chals.io 11466
Enter password: LaCpadRNNbWr99
Correct! Flag is: flag{s0lvem3_pl5}




